import glob
import os
import time

app_to_bench = "/home/steinbac/development/pippel_numa_tests/dev/bin/daligner"
data_to_use  = "/home/steinbac/development/pippel_numa_tests/dev-data"

if os.path.exists("./TEST.db") and os.path.exists("./test.fasta"):
    data_to_use = os.path.split(os.path.abspath("./TEST.db"))[0]
    
files        = [ item for item in glob.glob("{:s}/T*".format(data_to_use)) if os.path.isfile(item) ]
files.extend(glob.glob("{:s}/.T*".format(data_to_use)))
files.extend(glob.glob("{:s}/t*".format(data_to_use)))

temps_discovered = [ item for item in glob.glob("default-[0-9]*[0-9]") ]
temps_discovered.extend(glob.glob("numa_*-[0-9]*[0-9]"))

global_timestamp = int(time.time())

rule all:
    input: expand("{dataset}-{ts}/d002_00001/TEST.1.TEST.1.las",dataset=["default","numa_preferred_same","numa_fixed_same","numa_fixed_other"],ts=global_timestamp)
        
rule default:
    input: "TEST.db", "test.fasta"
    params: local_workdir=os.path.abspath("{:s}/{:s}-{:d}".format(data_to_use,"default",global_timestamp))
    
    output: "default-{tid}/d002_00001/TEST.1.TEST.1.las".format(tid=global_timestamp)
    benchmark: "results/default.tsv"
    threads: 4
    log: "logs/default.log"
    run:
        
        if not os.path.exists(params.local_workdir):
            os.mkdir(params.local_workdir)
        
        os.chdir(params.local_workdir)
        for f in files:
            fhead, ftail = os.path.split(f)
            sym_dest = "{:s}/{:s}".format(params.local_workdir,ftail)
            if not os.path.exists(sym_dest):
                os.symlink(f,sym_dest)

        #print("{app_to_bench} -t 40 -r 2 -I -j{threads} TEST.1 TEST.1".format(app_to_bench=app_to_bench, threads=threads))
        shell("{app_to_bench} -t 40 -r 2 -I -j{threads} TEST.1 TEST.1")
        os.chdir(data_to_use)
        
        

# rule anywhereio:
#     input: os.path.abspath("test.fasta")
#     params: anywhere="/tmp"
#     output: "{dir}/test".format(dir="/tmp")
#     benchmark: "results/testio.tsv"
#     run:
#         orig_pwd = os.path.abspath(os.curdir)
#         os.chdir(params.anywhere)
#         shell("dd if={input} of={output}")
#         os.chdir(orig_pwd)
        
rule numa_preferred_same:
    input: "TEST.db", "test.fasta"
    output: "d002_00001/TEST.1.TEST.1.las.numa_preferred_same"
    benchmark: "results/numa_preferred_same.tsv"
    log: "logs/numa_preferred_same.log"
    shell: """
    numactl -N0 --preferred=0 {app_to_bench} -t 40 -r 2 -I -j{threads} TEST.1 TEST.1;
    cp d002_00001/TEST.1.TEST.1.las {output}
    """

rule numa_fixed_same:
    input: "TEST.db", "test.fasta"
    output: "d002_00001/TEST.1.TEST.1.las.numa_fixed_same"
    benchmark: "results/numa_fixed_same.tsv"
    log: "logs/numa_fixed_same.log"
    shell: """
    numactl -N0 -m0 {app_to_bench} -t 40 -r 2 -I -j{threads} TEST.1 TEST.1;
    cp d002_00001/TEST.1.TEST.1.las {output}
    """

rule numa_fixed_other:
    input: "TEST.db", "test.fasta"
    output: "d002_00001/TEST.1.TEST.1.las.numa_fixed_other"
    benchmark: "results/numa_fixed_other.tsv"
    log: "logs/numa_fixed_other.log"
    shell: """
    numactl -N0 -m1 {app_to_bench} -t 40 -r 2 -I -j{threads} TEST.1 TEST.1;
    cp d002_00001/TEST.1.TEST.1.las {output}
    """

rule clean:
    message: "removing {temps_discovered}"
    shell: "rm -rfv {temps_discovered}"
