// is problematic needs to be adjusted for
// multi channel and multi illumination datasets
import ij.IJ;
import ij.ImagePlus;
import java.lang.Runtime;
import java.io.File;
import java.io.FilenameFilter;

runtime = Runtime.getRuntime();
System.out.println(runtime.availableProcessors() + " cores available for multi-threading");


// Load Parameters form job file
image_file_directory = System.getProperty( "image_file_directory" );
merged_xml = System.getProperty( "merged_xml" );
transform_angle = System.getProperty( "transform_angle" );
transform_channel = System.getProperty( "transform_channel" );
transform_illumination = System.getProperty( "transform_illumination" );
transform_timepoint = System.getProperty( "transform_timepoint" );
transformation = System.getProperty( "transformation" );
apply_transformation  = System.getProperty( "apply_transformation" );
define_mode_transform = System.getProperty( "define_mode_transform" );
matrix_transform = System.getProperty( "matrix_transform" );

// Print Parameters into output file

System.out.println( "browse = " + image_file_directory );
System.out.println( "select_xml = " + image_file_directory + merged_xml );
System.out.println( "apply_to_angle = " + transform_angle );
System.out.println( "apply_to_channel = " + transform_channel );
System.out.println( "apply_to_illumination = " + transform_illumination );
System.out.println( "apply_to_timepoint = " + transform_timepoint );
System.out.println( "transformation = " + transformation );
System.out.println( "apply = " + apply_transformation );
System.out.println( "define = " + define_mode_transform );
System.out.println( "matrix_transform = " + matrix_transform );

// Prints channel settings:
channel_setting = System.getProperty( "channel_setting" );
System.out.println( "Channel_setting = " + channel_setting );

String delims = "[,]";
String[] channel_token = channel_setting.split(delims);

if ( channel_token.length ==1 )

{ 

	channels_string = "_channel_" + channel_setting;
	channel_transformation = "";
	multiple_channels = "NO (one channel)";
}

else if ( channel_token.length > 1 )

{

	channels_string = "_all_channels";
	channel_transformation = "same_transformation_for_all_channels ";
	multiple_channels = "YES (one file per channel)";
	
}

System.out.println("channels_string = " + channels_string);
System.out.println( "channels = " + multiple_channels );


// Prints illumination settings:
illumination = System.getProperty( "illumination" );

String[] illumination_token = illumination.split(delims);

if ( illumination_token.length ==1 )

{ 

	illumination_string = "_" + illumination;
	System.out.println("illumination = " + illumination_string);
	multiple_illumination = "NO (one illumination side)";
}

else if ( channel_token.length > 1 )

{

	illumination = "";
	multiple_illumination = "YES (one file per illumination)";
	
}

System.out.println( "illumination = " + multiple_illumination );

System.out.println( "Apply Transformations browse=" + image_file_directory + " " +
        "select_xml=" + image_file_directory + merged_xml + " " +
        "apply_to_angle=[" + transform_angle + "] " +
        "apply_to_channel=[" + transform_channel + "] " +
        "apply_to_illumination=[" + transform_illumination + "] " +
        "apply_to_timepoint=[" + transform_timepoint + "] " +
        "transformation=" + transformation + " " +
        "apply=[" + apply_transformation + "] " +
        "define=" + define_mode_transform + " " +
        "same_transformation_for_all_timepoints " +
        channel_transformation + 
	"same_transformation_for_all_angles " +
        "all_timepoints" + channels_string + "_illumination" + illumination_string + "_all_angles=[" + matrix_transform + "]" );

// Execute Fiji Plugin
try {
IJ.run("Apply Transformations", 
	"browse=" + image_file_directory + " " + 
	"select_xml=" + image_file_directory + merged_xml + " " +
	"apply_to_angle=[" + transform_angle + "] " +
	"apply_to_channel=[" + transform_channel + "] " +
	"apply_to_illumination=[" + transform_illumination + "] " +
	"apply_to_timepoint=[" + transform_timepoint + "] " + 
	"transformation=" + transformation + " " +
	"apply=[" + apply_transformation + "] " +
	"define=" + define_mode_transform + " " + 
	"same_transformation_for_all_timepoints " + 
	channel_transformation +
	"same_transformation_for_all_angles " +
	"all_timepoints" + channels_string + "_illumination" + illumination_string + "_all_angles=[" + matrix_transform + "]");
}
catch ( e ) { 

    print( "[external transformation] caught exception: "+e );
    //important to fail the process if exception occurs
    runtime.exit(1);
    
}
/* shutdown */
runtime.exit(0);
